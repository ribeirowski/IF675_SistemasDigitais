// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/21/2022 20:16:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decodificador_nerfado
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decodificador_nerfado_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Vector;
// wires                                               
wire a1_4bits;
wire a2_4bits;
wire b1_4bits;
wire b2_4bits;
wire c1_4bits;
wire c2_4bits;
wire d1_4bits;
wire d2_4bits;
wire e1_4bits;
wire e2_4bits;
wire f1_4bits;
wire f2_4bits;
wire g1_4bits;
wire g2_4bits;

// assign statements (if any)                          
decodificador_nerfado i1 (
// port map - connection between master ports and signals/registers   
	.a1_4bits(a1_4bits),
	.a2_4bits(a2_4bits),
	.b1_4bits(b1_4bits),
	.b2_4bits(b2_4bits),
	.c1_4bits(c1_4bits),
	.c2_4bits(c2_4bits),
	.d1_4bits(d1_4bits),
	.d2_4bits(d2_4bits),
	.e1_4bits(e1_4bits),
	.e2_4bits(e2_4bits),
	.f1_4bits(f1_4bits),
	.f2_4bits(f2_4bits),
	.g1_4bits(g1_4bits),
	.g2_4bits(g2_4bits),
	.Vector(Vector)
);
initial 
begin 
#1000000 $finish;
end 
// Vector[ 3 ]
initial
begin
	Vector[3] = 1'b1;
	Vector[3] = #500000 1'b0;
	Vector[3] = #300000 1'b1;
	Vector[3] = #100000 1'b0;
end 
// Vector[ 2 ]
initial
begin
	Vector[2] = 1'b0;
	Vector[2] = #100000 1'b1;
	Vector[2] = #200000 1'b0;
	Vector[2] = #200000 1'b1;
	Vector[2] = #100000 1'b0;
	Vector[2] = #200000 1'b1;
	Vector[2] = #100000 1'b0;
end 
// Vector[ 1 ]
initial
begin
	Vector[1] = 1'b0;
	Vector[1] = #100000 1'b1;
	Vector[1] = #400000 1'b0;
	Vector[1] = #200000 1'b1;
	Vector[1] = #200000 1'b0;
end 
// Vector[ 0 ]
initial
begin
	Vector[0] = 1'b1;
	Vector[0] = #200000 1'b0;
	Vector[0] = #100000 1'b1;
	Vector[0] = #500000 1'b0;
	Vector[0] = #100000 1'b1;
end 
endmodule

